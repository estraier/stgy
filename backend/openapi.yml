openapi: 3.1.0
info:
  title: STGY API
  version: 1.0.0
  description: |
    STGY SNS backend API (Express/TypeScript)
    - Cookie authentication: session_id

servers:
  - url: http://localhost:3001

components:
  securitySchemes:
    sessionCookie:
      type: apiKey
      in: cookie
      name: session_id

  schemas:
    ErrorResponse:
      type: object
      properties:
        error: { type: string }
      required: [error]

    User:
      type: object
      properties:
        id: { type: string }
        nickname: { type: string }
        isAdmin: { type: boolean }
        blockStrangers: { type: boolean }
        snippet: { type: string }
        avatar: { type: string, nullable: true }
        aiModel: { type: string, nullable: true }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time, nullable: true }
        countFollowers: { type: integer }
        countFollowees: { type: integer }
        countPosts: { type: integer }
        isFollowedByFocusUser:
          type: boolean
          nullable: true
        isFollowingFocusUser:
          type: boolean
          nullable: true
        isBlockedByFocusUser:
          type: boolean
          nullable: true
        isBlockingFocusUser:
          type: boolean
          nullable: true
      required:
        [
          id,
          nickname,
          isAdmin,
          blockStrangers,
          snippet,
          avatar,
          aiModel,
          createdAt,
          countFollowers,
          countFollowees,
          countPosts,
        ]

    UserDetail:
      allOf:
        - $ref: "#/components/schemas/User"
        - type: object
          properties:
            email: { type: string }
            locale: { type: string }
            timezone: { type: string }
            introduction: { type: string }
            aiPersonality: { type: string, nullable: true }
          required: [email, locale, timezone, introduction]

    UserLite:
      type: object
      properties:
        id: { type: string }
        nickname: { type: string }
        isAdmin: { type: boolean }
        blockStrangers: { type: boolean }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time, nullable: true }
        countFollowers: { type: integer }
        countFollowees: { type: integer }
        countPosts: { type: integer }
      required:
        [
          id,
          nickname,
          isAdmin,
          blockStrangers,
          createdAt,
          countFollowers,
          countFollowees,
          countPosts,
        ]

    Post:
      type: object
      properties:
        id: { type: string }
        ownedBy: { type: string }
        replyTo: { type: string, nullable: true }
        createdAt: { type: string, format: date-time }
        publishedAt: { type: string, format: date-time, nullable: true }
        updatedAt: { type: string, format: date-time, nullable: true }
        snippet: { type: string }
        locale: { type: string, nullable: true }
        allowLikes: { type: boolean }
        allowReplies: { type: boolean }
        ownerNickname: { type: string }
        ownerLocale: { type: string }
        replyToOwnerNickname: { type: string, nullable: true }
        countLikes: { type: integer }
        countReplies: { type: integer }
        tags:
          type: array
          items: { type: string }
        isLikedByFocusUser:
          type: boolean
          nullable: true
        isRepliedByFocusUser:
          type: boolean
          nullable: true
        isBlockingFocusUser:
          type: boolean
          nullable: true
      required:
        [
          id,
          ownedBy,
          replyTo,
          createdAt,
          publishedAt,
          updatedAt,
          snippet,
          locale,
          allowLikes,
          allowReplies,
          ownerNickname,
          ownerLocale,
          countLikes,
          countReplies,
          tags,
        ]

    PostDetail:
      allOf:
        - $ref: "#/components/schemas/Post"
        - type: object
          properties:
            content: { type: string }
          required: [content]

    PostLite:
      type: object
      properties:
        id: { type: string }
        ownedBy: { type: string }
        replyTo: { type: string, nullable: true }
        createdAt: { type: string, format: date-time }
        publishedAt: { type: string, format: date-time, nullable: true }
        updatedAt: { type: string, format: date-time, nullable: true }
        allowLikes: { type: boolean }
        allowReplies: { type: boolean }
        ownerNickname: { type: string }
        ownerLocale: { type: string }
        replyToOwnerNickname: { type: string, nullable: true }
        countLikes: { type: integer }
        countReplies: { type: integer }
        tags:
          type: array
          items: { type: string }
      required:
        [
          id,
          ownedBy,
          replyTo,
          allowLikes,
          allowReplies,
          createdAt,
          publishedAt,
          updatedAt,
          ownerNickname,
          ownerLocale,
          countLikes,
          countReplies,
          tags,
        ]

    AIModel:
      type: object
      properties:
        name: { type: string }
        description: { type: string }
        inputCost: { type: number, format: float }
        outputCost: { type: number, format: float }
      required: [name, description, inputCost, outputCost]

    StorageObjectMetadata:
      type: object
      properties:
        bucket: { type: string }
        key: { type: string }
        size: { type: integer }
        etag: { type: string, nullable: true }
        lastModified: { type: string, format: date-time, nullable: true }
        storageClass: { type: string, nullable: true }
        contentType: { type: string, nullable: true }
      required: [bucket, key, size]

    MediaObject:
      allOf:
        - $ref: "#/components/schemas/StorageObjectMetadata"
        - type: object
          properties:
            publicUrl: { type: string }
          required: [publicUrl]

    PresignedPostResult:
      type: object
      properties:
        url: { type: string }
        fields:
          type: object
          additionalProperties: { type: string }
        objectKey: { type: string }
        maxBytes: { type: integer, nullable: true }
        expiresInSec: { type: integer }
      required: [url, fields, objectKey, expiresInSec]

    StorageMonthlyQuota:
      type: object
      properties:
        userId: { type: string }
        yyyymm: { type: string }
        bytesMasters: { type: integer }
        bytesThumbs: { type: integer }
        bytesTotal: { type: integer }
        limitSingleBytes: { type: integer, nullable: true }
        limitMonthlyBytes: { type: integer, nullable: true }
      required:
        [userId, yyyymm, bytesMasters, bytesThumbs, bytesTotal, limitSingleBytes, limitMonthlyBytes]

    NotificationRecordUser:
      type: object
      properties:
        userId: { type: string }
        userNickname: { type: string }
        ts: { type: number }
      required: [userId, userNickname, ts]

    NotificationRecordPost:
      type: object
      properties:
        userId: { type: string }
        userNickname: { type: string }
        postId: { type: string }
        postSnippet: { type: string }
        ts: { type: number }
      required: [userId, userNickname, postId, postSnippet, ts]

    Notification:
      type: object
      properties:
        slot: { type: string }
        term: { type: string }
        isRead: { type: boolean }
        updatedAt: { type: string, format: date-time }
        createdAt: { type: string, format: date-time }
        countUsers: { type: integer }
        countPosts: { type: integer }
        records:
          type: array
          items:
            anyOf:
              - $ref: "#/components/schemas/NotificationRecordUser"
              - $ref: "#/components/schemas/NotificationRecordPost"
      required: [slot, term, isRead, updatedAt, createdAt, records]

    UserPubConfig:
      type: object
      properties:
        siteName: { type: string }
        subtitle: { type: string }
        author: { type: string }
        introduction: { type: string }
        designTheme: { type: string }
        showServiceHeader: { type: boolean }
        showSideProfile: { type: boolean }
        showSideRecent: { type: boolean }
        locale: { type: string }
      required:
        [
          siteName,
          subtitle,
          author,
          introduction,
          designTheme,
          showServiceHeader,
          showSideProfile,
          showSideRecent,
        ]

  responses:
    Error400:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    Error401:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    Error403:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    Error404:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"

paths:
  /auth:
    post:
      summary: Log in
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string }
                password: { type: string }
              required: [email, password]
      responses:
        "200":
          description: Login OK, sets session_id cookie
          content:
            application/json:
              schema:
                type: object
                properties:
                  sessionId: { type: string }
        "400":
          $ref: "#/components/responses/Error400"
        "401":
          $ref: "#/components/responses/Error401"

    get:
      summary: Get session info
      security:
        - sessionCookie: []
      responses:
        "200":
          description: Session valid, returns session info
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId: { type: string }
                  userEmail: { type: string }
                  userNickname: { type: string }
                  userIsAdmin: { type: boolean }
                  userCreatedAt: { type: string, format: date-time }
                  userUpdatedAt: { type: string, format: date-time, nullable: true }
                  loggedInAt: { type: string, format: date-time }
                required:
                  [
                    userId,
                    userEmail,
                    userNickname,
                    userIsAdmin,
                    userCreatedAt,
                    userUpdatedAt,
                    loggedInAt,
                  ]
        "401":
          $ref: "#/components/responses/Error401"

    delete:
      summary: Log out
      security:
        - sessionCookie: []
      responses:
        "200":
          description: Logout OK (clears cookie)
          content:
            application/json:
              schema:
                type: object
                properties:
                  result: { type: string }

  /auth/switch-user:
    post:
      summary: (Admin only) Switch current session to another user
      security:
        - sessionCookie: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id: { type: string }
              required: [id]
      responses:
        "200":
          description: Switched. Sets session_id cookie.
          content:
            application/json:
              schema:
                type: object
                properties:
                  sessionId: { type: string }
        "400":
          $ref: "#/components/responses/Error400"
        "403":
          $ref: "#/components/responses/Error403"
        "404":
          $ref: "#/components/responses/Error404"

  /signup/start:
    post:
      summary: Start signup (send verification code)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string }
                password: { type: string }
                locale: { type: string }
                timezone: { type: string }
              required: [email, password]
      responses:
        "201":
          description: Signup started
          content:
            application/json:
              schema:
                type: object
                properties:
                  signupId: { type: string }
        "400":
          $ref: "#/components/responses/Error400"
        "403":
          $ref: "#/components/responses/Error403"

  /signup/verify:
    post:
      summary: Complete signup (verify code)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                signupId: { type: string }
                verificationCode: { type: string }
              required: [signupId, verificationCode]
      responses:
        "201":
          description: Signup success
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId: { type: string }
        "400":
          $ref: "#/components/responses/Error400"
        "403":
          $ref: "#/components/responses/Error403"

  /users/count:
    get:
      summary: Get total user count (with optional filters)
      security:
        - sessionCookie: []
      parameters:
        - name: query
          in: query
          schema: { type: string }
        - name: nickname
          in: query
          schema: { type: string }
        - name: nicknamePrefix
          in: query
          schema: { type: string }
      responses:
        "200":
          description: User count
          content:
            application/json:
              schema:
                type: object
                properties:
                  count: { type: integer }
        "401":
          $ref: "#/components/responses/Error401"

  /users:
    get:
      summary: List users
      security:
        - sessionCookie: []
      parameters:
        - name: offset
          in: query
          schema: { type: integer, default: 0 }
        - name: limit
          in: query
          schema: { type: integer, default: 100 }
        - name: order
          in: query
          schema: { type: string, enum: [asc, desc, social], default: desc }
        - name: query
          in: query
          schema: { type: string }
        - name: nickname
          in: query
          schema: { type: string }
        - name: nicknamePrefix
          in: query
          schema: { type: string }
        - name: focusUserId
          in: query
          schema: { type: string }
          description: (Optional) Used with order=social to prioritize followees and followers.
      responses:
        "200":
          description: Users list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "401":
          $ref: "#/components/responses/Error401"

    post:
      summary: (Admin only) Create user
      security:
        - sessionCookie: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string }
                nickname: { type: string }
                password: { type: string }
                isAdmin: { type: boolean }
                blockStrangers: { type: boolean }
                locale: { type: string }
                timezone: { type: string }
                introduction: { type: string }
                avatar: { type: string, nullable: true }
                aiModel: { type: string, nullable: true }
                aiPersonality: { type: string, nullable: true }
              required:
                [email, nickname, password, isAdmin, blockStrangers, locale, timezone, introduction]
      responses:
        "201":
          description: User created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "403":
          $ref: "#/components/responses/Error403"
        "400":
          $ref: "#/components/responses/Error400"

  /users/{id}/lite:
    get:
      summary: Get user lite
      security:
        - sessionCookie: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: User lite info
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserLite"
        "401":
          $ref: "#/components/responses/Error401"
        "404":
          $ref: "#/components/responses/Error404"

  /users/{id}:
    get:
      summary: Get user basics
      security:
        - sessionCookie: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
        - name: focusUserId
          in: query
          required: false
          schema: { type: string }
      responses:
        "200":
          description: User info
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDetail"
        "401":
          $ref: "#/components/responses/Error401"
        "404":
          $ref: "#/components/responses/Error404"

    put:
      summary: Update user
      security:
        - sessionCookie: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string }
                nickname: { type: string }
                isAdmin: { type: boolean }
                blockStrangers: { type: boolean }
                locale: { type: string }
                timezone: { type: string }
                introduction: { type: string }
                avatar: { type: string, nullable: true }
                aiModel: { type: string, nullable: true }
                aiPersonality: { type: string, nullable: true }
      responses:
        "200":
          description: User updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          $ref: "#/components/responses/Error401"
        "403":
          $ref: "#/components/responses/Error403"
        "404":
          $ref: "#/components/responses/Error404"
        "400":
          $ref: "#/components/responses/Error400"

    delete:
      summary: Delete user
      security:
        - sessionCookie: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: User deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  result: { type: string }
        "401":
          $ref: "#/components/responses/Error401"
        "403":
          $ref: "#/components/responses/Error403"
        "404":
          $ref: "#/components/responses/Error404"

  /users/{id}/email/start:
    post:
      summary: Start email update (send verification code)
      security:
        - sessionCookie: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string }
              required: [email]
      responses:
        "201":
          description: Email update process started
          content:
            application/json:
              schema:
                type: object
                properties:
                  updateEmailId: { type: string }
        "400":
          $ref: "#/components/responses/Error400"
        "401":
          $ref: "#/components/responses/Error401"
        "403":
          $ref: "#/components/responses/Error403"

  /users/{id}/email/verify:
    post:
      summary: Verify email update (verify code)
      security:
        - sessionCookie: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                updateEmailId: { type: string }
                verificationCode: { type: string }
              required: [updateEmailId, verificationCode]
      responses:
        "200":
          description: Email update verified and completed
          content:
            application/json:
              schema:
                type: object
                properties:
                  result: { type: string }
                example: { result: ok }
        "400":
          $ref: "#/components/responses/Error400"
        "401":
          $ref: "#/components/responses/Error401"
        "403":
          $ref: "#/components/responses/Error403"

  /users/password/reset/start:
    post:
      summary: Start password reset process
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string }
              required: [email]
      responses:
        "201":
          description: Password reset process started
          content:
            application/json:
              schema:
                type: object
                properties:
                  resetPasswordId:
                    type: string
                    description: Password reset session ID
                  webCode:
                    type: string
                    description: Verification code for password reset
                required: [resetPasswordId, webCode]
        "400":
          $ref: "#/components/responses/Error400"

  /users/password/reset/verify:
    post:
      summary: Complete password reset with session & code
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string }
                resetPasswordId: { type: string }
                webCode: { type: string }
                mailCode: { type: string }
                newPassword: { type: string }
              required: [email, resetPasswordId, webCode, mailCode, newPassword]
      responses:
        "200":
          description: Password updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  result: { type: string }
        "400":
          $ref: "#/components/responses/Error400"

  /users/{id}/password:
    put:
      summary: Update user password
      security:
        - sessionCookie: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password: { type: string }
              required: [password]
      responses:
        "200":
          description: Password updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  result: { type: string }
        "401":
          $ref: "#/components/responses/Error401"
        "403":
          $ref: "#/components/responses/Error403"
        "404":
          $ref: "#/components/responses/Error404"
        "400":
          $ref: "#/components/responses/Error400"

  /users/{id}/follow:
    post:
      summary: Follow user
      security:
        - sessionCookie: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Followed
          content:
            application/json:
              schema:
                type: object
                properties:
                  result: { type: string }
        "401":
          $ref: "#/components/responses/Error401"
        "400":
          $ref: "#/components/responses/Error400"
    delete:
      summary: Unfollow user
      security:
        - sessionCookie: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Unfollowed
          content:
            application/json:
              schema:
                type: object
                properties:
                  result: { type: string }
        "401":
          $ref: "#/components/responses/Error401"
        "404":
          $ref: "#/components/responses/Error404"

  /users/{id}/followees:
    get:
      summary: List followees
      security:
        - sessionCookie: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
        - name: offset
          in: query
          schema: { type: integer, default: 0 }
        - name: limit
          in: query
          schema: { type: integer, default: 100 }
        - name: order
          in: query
          schema: { type: string, enum: [asc, desc], default: desc }
        - name: focusUserId
          in: query
          schema: { type: string }
          description: (Optional) Used to get isFollowedByFocusUser etc.
      responses:
        "200":
          description: Followees list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "401":
          $ref: "#/components/responses/Error401"

  /users/{id}/followers:
    get:
      summary: List followers
      security:
        - sessionCookie: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
        - name: offset
          in: query
          schema: { type: integer, default: 0 }
        - name: limit
          in: query
          schema: { type: integer, default: 100 }
        - name: order
          in: query
          schema: { type: string, enum: [asc, desc], default: desc }
        - name: focusUserId
          in: query
          schema: { type: string }
          description: (Optional) Used to get isFollowedByFocusUser etc.
      responses:
        "200":
          description: Followers list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "401":
          $ref: "#/components/responses/Error401"

  /users/{id}/block:
    post:
      summary: Block user
      security:
        - sessionCookie: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Blocked
          content:
            application/json:
              schema:
                type: object
                properties:
                  result: { type: string }
        "401":
          $ref: "#/components/responses/Error401"
        "400":
          $ref: "#/components/responses/Error400"
    delete:
      summary: Unblock user
      security:
        - sessionCookie: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Unblocked
          content:
            application/json:
              schema:
                type: object
                properties:
                  result: { type: string }
        "401":
          $ref: "#/components/responses/Error401"
        "404":
          $ref: "#/components/responses/Error404"

  /users/friends/by-nickname-prefix:
    get:
      summary: List friends by nickname prefix
      security:
        - sessionCookie: []
      parameters:
        - name: nicknamePrefix
          in: query
          schema: { type: string }
        - name: offset
          in: query
          schema: { type: integer, default: 0 }
        - name: limit
          in: query
          schema: { type: integer, default: 100 }
        - name: focusUserId
          in: query
          schema: { type: string }
          description: (Optional) Base user whose followees are prioritized. Defaults to current user.
        - name: omitSelf
          in: query
          schema: { type: boolean, default: false }
          description: If true, excludes the self group entirely.
        - name: omitOthers
          in: query
          schema: { type: boolean, default: false }
          description: If true, excludes the others group entirely.
      responses:
        "200":
          description: Users list by nickname prefix and priority
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "400":
          $ref: "#/components/responses/Error400"
        "401":
          $ref: "#/components/responses/Error401"

  /posts/count:
    get:
      summary: Get post count
      security:
        - sessionCookie: []
      parameters:
        - name: query
          in: query
          schema: { type: string }
        - name: ownedBy
          in: query
          schema: { type: string }
        - name: tag
          in: query
          schema: { type: string }
        - name: replyTo
          in: query
          schema: { type: string }
          description: |
            If omitted: include all posts.
            If empty string (""): only posts with no replyTo (not a reply).
            If "*": only posts with any replyTo (replies).
            Otherwise: only posts with replyTo equal to the given value.
      responses:
        "200":
          description: Post count
          content:
            application/json:
              schema:
                type: object
                properties:
                  count: { type: integer }
        "401":
          $ref: "#/components/responses/Error401"

  /posts:
    get:
      summary: List posts
      security:
        - sessionCookie: []
      parameters:
        - name: offset
          in: query
          schema: { type: integer, default: 0 }
        - name: limit
          in: query
          schema: { type: integer, default: 100 }
        - name: order
          in: query
          schema: { type: string, enum: [asc, desc], default: desc }
        - name: query
          in: query
          schema: { type: string }
        - name: ownedBy
          in: query
          schema: { type: string }
        - name: tag
          in: query
          schema: { type: string }
        - name: replyTo
          in: query
          schema: { type: string }
          description: |
            If omitted: include all posts.
            If empty string (""): only posts with no replyTo (not a reply).
            If "*": only posts with any replyTo (replies).
            Otherwise: only posts with replyTo equal to the given value.
        - name: focusUserId
          in: query
          schema: { type: string }
          description: (Optional) Used for personalization isLikedByFocusUser etc.
      responses:
        "200":
          description: Posts list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Post"
        "401":
          $ref: "#/components/responses/Error401"

    post:
      summary: Create post
      security:
        - sessionCookie: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content: { type: string }
                locale: { type: string, nullable: true }
                ownedBy: { type: string }
                replyTo: { type: string, nullable: true }
                publishedAt: { type: string, nullable: true }
                allowLikes: { type: boolean }
                allowReplies: { type: boolean }
                tags:
                  type: array
                  items: { type: string }
              required: [content, tags]
      responses:
        "201":
          description: Post created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        "400":
          $ref: "#/components/responses/Error400"
        "403":
          $ref: "#/components/responses/Error403"

  /posts/by-followees:
    get:
      summary: List posts by followees
      security:
        - sessionCookie: []
      parameters:
        - name: userId
          in: query
          required: true
          schema: { type: string }
        - name: offset
          in: query
          schema: { type: integer, default: 0 }
        - name: limit
          in: query
          schema: { type: integer, default: 100 }
        - name: order
          in: query
          schema: { type: string, enum: [asc, desc], default: desc }
        - name: includeSelf
          in: query
          schema: { type: boolean, default: false }
        - name: includeReplies
          in: query
          schema: { type: boolean, default: true }
        - name: focusUserId
          in: query
          schema: { type: string }
          description: (Optional) Used for personalization isLikedByFocusUser etc.
      responses:
        "200":
          description: Posts list by followees
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Post"
        "400":
          $ref: "#/components/responses/Error400"
        "401":
          $ref: "#/components/responses/Error401"

  /posts/liked:
    get:
      summary: List posts liked by user
      security:
        - sessionCookie: []
      parameters:
        - name: userId
          in: query
          required: true
          schema: { type: string }
        - name: offset
          in: query
          schema: { type: integer, default: 0 }
        - name: limit
          in: query
          schema: { type: integer, default: 100 }
        - name: order
          in: query
          schema: { type: string, enum: [asc, desc], default: desc }
        - name: includeReplies
          in: query
          schema: { type: boolean, default: true }
        - name: focusUserId
          in: query
          schema: { type: string }
          description: (Optional) Used for personalization isLikedByFocusUser etc.
      responses:
        "200":
          description: Posts liked by user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Post"
        "400":
          $ref: "#/components/responses/Error400"
        "401":
          $ref: "#/components/responses/Error401"

  /posts/{id}/lite:
    get:
      summary: Get post lite by id
      security:
        - sessionCookie: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Post lite
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostLite"
        "401":
          $ref: "#/components/responses/Error401"
        "404":
          $ref: "#/components/responses/Error404"

  /posts/{id}:
    get:
      summary: Get post by id
      security:
        - sessionCookie: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
        - name: focusUserId
          in: query
          required: false
          schema: { type: string }
      responses:
        "200":
          description: Post detail
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostDetail"
        "401":
          $ref: "#/components/responses/Error401"
        "404":
          $ref: "#/components/responses/Error404"

    put:
      summary: Update post
      security:
        - sessionCookie: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content: { type: string }
                locale: { type: string, nullable: true }
                ownedBy: { type: string }
                replyTo: { type: string, nullable: true }
                publishedAt: { type: string, nullable: true }
                allowLikes: { type: boolean }
                allowReplies: { type: boolean }
                tags:
                  type: array
                  items: { type: string }
      responses:
        "200":
          description: Post updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostDetail"
        "401":
          $ref: "#/components/responses/Error401"
        "403":
          $ref: "#/components/responses/Error403"
        "404":
          $ref: "#/components/responses/Error404"
        "400":
          $ref: "#/components/responses/Error400"

    delete:
      summary: Delete post
      security:
        - sessionCookie: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Post deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  result: { type: string }
        "401":
          $ref: "#/components/responses/Error401"
        "403":
          $ref: "#/components/responses/Error403"
        "404":
          $ref: "#/components/responses/Error404"

  /posts/{id}/like:
    post:
      summary: Like a post
      security:
        - sessionCookie: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Post liked
          content:
            application/json:
              schema:
                type: object
                properties:
                  result: { type: string }
        "401":
          $ref: "#/components/responses/Error401"
        "400":
          $ref: "#/components/responses/Error400"
        "403":
          $ref: "#/components/responses/Error403"
    delete:
      summary: Remove like from a post
      security:
        - sessionCookie: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Like removed
          content:
            application/json:
              schema:
                type: object
                properties:
                  result: { type: string }
        "401":
          $ref: "#/components/responses/Error401"
        "404":
          $ref: "#/components/responses/Error404"

  /posts/{id}/likers:
    get:
      summary: List users who liked a post
      security:
        - sessionCookie: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
        - name: offset
          in: query
          schema: { type: integer, default: 0 }
        - name: limit
          in: query
          schema: { type: integer, default: 100 }
        - name: order
          in: query
          schema: { type: string, enum: [asc, desc], default: desc }
      responses:
        "200":
          description: Users who liked this post
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "401":
          $ref: "#/components/responses/Error401"
        "400":
          $ref: "#/components/responses/Error400"

  /ai-models:
    get:
      summary: List AI models
      security:
        - sessionCookie: []
      responses:
        "200":
          description: List of AI models
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AIModel"
        "401":
          $ref: "#/components/responses/Error401"

  /ai-models/{name}:
    get:
      summary: Get AI model by name
      security:
        - sessionCookie: []
      parameters:
        - name: name
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: AI model
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AIModel"
        "401":
          $ref: "#/components/responses/Error401"
        "404":
          $ref: "#/components/responses/Error404"

  /media/{userId}/images/presigned:
    post:
      summary: Get presigned POST for image upload
      security:
        - sessionCookie: []
      parameters:
        - name: userId
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                filename: { type: string }
                sizeBytes: { type: integer }
              required: [filename, sizeBytes]
      responses:
        "200":
          description: Presigned POST to upload image bytes to storage
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PresignedPostResult"
        "400":
          $ref: "#/components/responses/Error400"
        "401":
          $ref: "#/components/responses/Error401"
        "403":
          $ref: "#/components/responses/Error403"

  /media/{userId}/images/finalize:
    post:
      summary: Finalize image (move from staging, enqueue thumbnail job)
      security:
        - sessionCookie: []
      parameters:
        - name: userId
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                key:
                  type: string
                  description: Staging object key returned as objectKey from presign API
              required: [key]
      responses:
        "200":
          description: Finalized media object (master)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MediaObject"
        "400":
          $ref: "#/components/responses/Error400"
        "401":
          $ref: "#/components/responses/Error401"
        "403":
          $ref: "#/components/responses/Error403"

  /media/{userId}/images:
    get:
      summary: List user's images (masters)
      security:
        - sessionCookie: []
      parameters:
        - name: userId
          in: path
          required: true
          schema: { type: string }
        - name: offset
          in: query
          schema: { type: integer, default: 0 }
        - name: limit
          in: query
          schema: { type: integer, default: 100 }
      responses:
        "200":
          description: List of media objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MediaObject"
        "400":
          $ref: "#/components/responses/Error400"
        "401":
          $ref: "#/components/responses/Error401"
        "403":
          $ref: "#/components/responses/Error403"

  /media/{userId}/images/quota:
    get:
      summary: Get monthly image storage quota
      description: Returns the current month's quota if yyyymm is omitted.
      security:
        - sessionCookie: []
      parameters:
        - name: userId
          in: path
          required: true
          schema: { type: string }
        - name: yyyymm
          in: query
          required: false
          schema:
            type: string
            pattern: '^\d{6}$'
      responses:
        "200":
          description: Monthly quota
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StorageMonthlyQuota"
        "400":
          $ref: "#/components/responses/Error400"
        "401":
          $ref: "#/components/responses/Error401"
        "403":
          $ref: "#/components/responses/Error403"

  /media/{userId}/images/{path}:
    get:
      summary: Download a specific image or thumbnail
      description: |
        `path` is a URL-encoded path relative to the user prefix. It may contain slashes (e.g. `797491/XXXXXXXX.png` or `thumbs/XXXXXXXX_image.webp`).
      security:
        - sessionCookie: []
      parameters:
        - name: userId
          in: path
          required: true
          schema: { type: string }
        - name: path
          in: path
          required: true
          schema: { type: string }
          allowReserved: true
      responses:
        "200":
          description: Image bytes
          content:
            image/*:
              schema: { type: string, format: binary }
            application/octet-stream:
              schema: { type: string, format: binary }
        "400":
          $ref: "#/components/responses/Error400"
        "401":
          $ref: "#/components/responses/Error401"
        "403":
          $ref: "#/components/responses/Error403"
    delete:
      summary: Delete a specific image master (and its thumbnails)
      description: Deletes the master image and any thumbnails under `/thumbs/` derived from it.
      security:
        - sessionCookie: []
      parameters:
        - name: userId
          in: path
          required: true
          schema: { type: string }
        - name: path
          in: path
          required: true
          schema: { type: string }
          allowReserved: true
      responses:
        "200":
          description: Deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  result: { type: string }
                example: { result: ok }
        "400":
          $ref: "#/components/responses/Error400"
        "401":
          $ref: "#/components/responses/Error401"
        "403":
          $ref: "#/components/responses/Error403"

  /media/{userId}/profiles/{slot}/presigned:
    post:
      summary: Get presigned POST for profile image upload (avatar)
      security:
        - sessionCookie: []
      parameters:
        - name: userId
          in: path
          required: true
          schema: { type: string }
        - name: slot
          in: path
          required: true
          schema: { type: string, enum: [avatar] }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                filename: { type: string }
                sizeBytes: { type: integer }
              required: [filename, sizeBytes]
      responses:
        "200":
          description: Presigned POST to upload profile image
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PresignedPostResult"
        "400":
          $ref: "#/components/responses/Error400"
        "401":
          $ref: "#/components/responses/Error401"
        "403":
          $ref: "#/components/responses/Error403"

  /media/{userId}/profiles/{slot}/finalize:
    post:
      summary: Finalize profile image (avatar). Also updates users.avatar with "<bucket>/<key>"
      security:
        - sessionCookie: []
      parameters:
        - name: userId
          in: path
          required: true
          schema: { type: string }
        - name: slot
          in: path
          required: true
          schema: { type: string, enum: [avatar] }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                key:
                  type: string
                  description: Staging object key returned as objectKey from presign API
              required: [key]
      responses:
        "200":
          description: Finalized profile master object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MediaObject"
        "400":
          $ref: "#/components/responses/Error400"
        "401":
          $ref: "#/components/responses/Error401"
        "403":
          $ref: "#/components/responses/Error403"

  /media/{userId}/profiles/{slot}:
    get:
      summary: Download profile master image (avatar)
      security:
        - sessionCookie: []
      parameters:
        - name: userId
          in: path
          required: true
          schema: { type: string }
        - name: slot
          in: path
          required: true
          schema: { type: string, enum: [avatar] }
      responses:
        "200":
          description: Image bytes
          content:
            image/*:
              schema: { type: string, format: binary }
            application/octet-stream:
              schema: { type: string, format: binary }
        "400":
          $ref: "#/components/responses/Error400"
        "401":
          $ref: "#/components/responses/Error401"
        "403":
          $ref: "#/components/responses/Error403"
    delete:
      summary: Delete profile master image (avatar) and its thumbnails, and clear users.avatar
      security:
        - sessionCookie: []
      parameters:
        - name: userId
          in: path
          required: true
          schema: { type: string }
        - name: slot
          in: path
          required: true
          schema: { type: string, enum: [avatar] }
      responses:
        "200":
          description: Deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  result: { type: string }
                example: { result: ok }
        "400":
          $ref: "#/components/responses/Error400"
        "401":
          $ref: "#/components/responses/Error401"
        "403":
          $ref: "#/components/responses/Error403"

  /notifications/feed:
    get:
      summary: Get notification feed (merged unread/read)
      security:
        - sessionCookie: []
      parameters:
        - name: newerThan
          in: query
          schema: { type: string, format: date-time }
      responses:
        "200":
          description: Notification feed (sorted by updatedAt desc)
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Notification"
        "304":
          description: Not Modified (no updates since newerThan)
        "401":
          $ref: "#/components/responses/Error401"

  /notifications/mark:
    post:
      summary: Mark a single notification (by slot + term)
      security:
        - sessionCookie: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                slot: { type: string }
                term: { type: string, maxLength: 20 }
                isRead: { type: boolean }
              required: [slot, term, isRead]
      responses:
        "204":
          description: Updated
        "400":
          $ref: "#/components/responses/Error400"
        "401":
          $ref: "#/components/responses/Error401"

  /notifications/mark-all:
    post:
      summary: Mark all notifications for current user
      security:
        - sessionCookie: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                isRead: { type: boolean }
              required: [isRead]
      responses:
        "204":
          description: Updated
        "400":
          $ref: "#/components/responses/Error400"
        "401":
          $ref: "#/components/responses/Error401"

  /posts/pub/{postId}:
    get:
      summary: Get a public post by id (published)
      description: Returns the post only if its publishedAt is not later than now.
      parameters:
        - name: postId
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Public post detail
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostDetail"
        "400":
          $ref: "#/components/responses/Error400"
        "404":
          $ref: "#/components/responses/Error404"

  /posts/pub-by-user/{userId}:
    get:
      summary: List public posts by user
      description: Returns posts whose publishedAt is not later than now.
      parameters:
        - name: userId
          in: path
          required: true
          schema: { type: string }
        - name: offset
          in: query
          schema: { type: integer, default: 0 }
        - name: limit
          in: query
          schema: { type: integer, default: 100 }
        - name: order
          in: query
          schema: { type: string, enum: [asc, desc], default: desc }
      responses:
        "200":
          description: Public posts list (snippets)
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Post"
        "400":
          $ref: "#/components/responses/Error400"

  /users/{userId}/pub-config:
    get:
      summary: Get user's public site config
      security:
        - sessionCookie: []
      parameters:
        - name: userId
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Public config for the user (defaults if not set)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserPubConfig"
        "401":
          $ref: "#/components/responses/Error401"
        "403":
          $ref: "#/components/responses/Error403"

    put:
      summary: Upsert user's public site config
      security:
        - sessionCookie: []
      parameters:
        - name: userId
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                siteName: { type: string }
                author: { type: string }
                introduction: { type: string }
                designTheme: { type: string }
                showServiceHeader: { type: boolean }
                showSideProfile: { type: boolean }
                showSideRecent: { type: boolean }
      responses:
        "200":
          description: Saved public config
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserPubConfig"
        "400":
          $ref: "#/components/responses/Error400"
        "401":
          $ref: "#/components/responses/Error401"
        "403":
          $ref: "#/components/responses/Error403"
