networks:
  stgy_net:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: br-stgy
    ipam:
      config:
        - subnet: 172.23.0.0/24

x-host-gw: &host_gw
  extra_hosts:
    - "host.docker.internal:host-gateway"

services:
  postgres:
    <<: *host_gw
    networks: [stgy_net]
    image: postgres:16
    restart: always
    environment:
      POSTGRES_USER: ${STGY_DATABASE_USER:?}
      POSTGRES_PASSWORD: ${STGY_DATABASE_PASSWORD:?}
      POSTGRES_DB: ${STGY_DATABASE_NAME:?}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C --lc-collate=C --lc-ctype=en_US.UTF-8"
    ports:
      - "127.0.0.1:${STGY_DATABASE_PORT:-5432}:5432"
    volumes:
      - ./postgres/init:/docker-entrypoint-initdb.d
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${STGY_DATABASE_USER:?} -d ${STGY_DATABASE_NAME:?}"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 5s

  minio:
    <<: *host_gw
    networks: [stgy_net]
    image: minio/minio:RELEASE.2025-07-23T15-54-02Z
    environment:
      MINIO_ROOT_USER: ${STGY_MINIO_ROOT_USER:?}
      MINIO_ROOT_PASSWORD: ${STGY_MINIO_ROOT_PASSWORD:?}
      MINIO_API_CORS_ALLOW_ORIGIN: ${STGY_MINIO_CORS_ALLOW_ORIGIN:?}
      MINIO_BROWSER_REDIRECT_URL: ${STGY_MINIO_BROWSER_REDIRECT_URL:?}
    entrypoint: ["/bin/sh", "/entrypoint.sh"]
    command: ["minio", "server", "/data", "--console-address", ":9001"]
    ports:
      - "127.0.0.1:${STGY_MINIO_PORT:-9000}:9000"
      - "127.0.0.1:${STGY_MINIO_CONSOLE_PORT:-9001}:9001"
    volumes:
      - ./minio/entrypoint.sh:/entrypoint.sh:ro
      - ./minio/init.sh:/init.sh:ro
      - minio_data:/data
    restart: unless-stopped

  redis:
    <<: *host_gw
    networks: [stgy_net]
    image: redis:7
    restart: always
    ports:
      - "127.0.0.1:${STGY_REDIS_PORT:-6379}:6379"
    command: ["redis-server", "--requirepass", "${STGY_REDIS_PASSWORD:?}"]
    healthcheck:
      test: ["CMD-SHELL", "redis-cli -a ${STGY_REDIS_PASSWORD:?} PING || exit 1"]
      interval: 5s
      timeout: 3s
      retries: 20

  mailpit:
    <<: *host_gw
    networks: [stgy_net]
    image: axllent/mailpit:v1.27
    restart: always
    environment:
      MP_SMTP_BIND_ADDR: 0.0.0.0:${STGY_SMTP_PORT:-5587}
      MP_UI_BIND_ADDR: 0.0.0.0:${STGY_MAILPIT_CONSOLE_PORT:-8025}
      # MP_SMTP_RELAY_HOST: sgty.jp
      # MP_SMTP_RELAY_PORT: 587
      # MP_SMTP_RELAY_STARTTLS: true
      # MP_SMTP_RELAY_AUTH: plain
      # MP_SMTP_RELAY_USERNAME: postfix@stgy.jp
      # MP_SMTP_RELAY_PASSWORD: ********
      # MP_SMTP_RELAY_OVERRIDE_FROM: noreply@stgy.jp
      # MP_SMTP_RELAY_ALL: true
    ports:
      - "127.0.0.1:${STGY_SMTP_PORT:-5587}:${STGY_SMTP_PORT:-5587}"
      - "127.0.0.1:${STGY_MAILPIT_CONSOLE_PORT:-8025}:${STGY_MAILPIT_CONSOLE_PORT:-8025}"

  caddy:
    image: caddy:2
    networks: [stgy_net]
    ports:
      - "${STGY_CADDY_PORT:-8080}:8080"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
    restart: unless-stopped

  mailworker:
    <<: *host_gw
    networks: [stgy_net]
    build:
      context: .
      dockerfile: backend/Dockerfile
    depends_on:
      redis:
        condition: service_healthy
      mailpit:
        condition: service_started
    environment:
      STGY_REDIS_HOST: ${STGY_REDIS_HOST:?}
      STGY_REDIS_PORT: ${STGY_REDIS_PORT:-6379}
      STGY_REDIS_PASSWORD: ${STGY_REDIS_PASSWORD:?}
      STGY_SMTP_HOST: ${STGY_SMTP_HOST:?}
      STGY_SMTP_PORT: ${STGY_SMTP_PORT:-587}
      STGY_MAIL_SENDER_ADDRESS: ${STGY_MAIL_SENDER_ADDRESS:?}
    command: ["node", "dist/mailWorker.js"]
    restart: unless-stopped

  mediaworker:
    <<: *host_gw
    networks: [stgy_net]
    build:
      context: .
      dockerfile: backend/Dockerfile
    depends_on:
      redis:
        condition: service_healthy
      minio:
        condition: service_started
    environment:
      STGY_REDIS_HOST: ${STGY_REDIS_HOST:?}
      STGY_REDIS_PORT: ${STGY_REDIS_PORT:-6379}
      STGY_REDIS_PASSWORD: ${STGY_REDIS_PASSWORD:?}
      STGY_STORAGE_DRIVER: ${STGY_STORAGE_DRIVER:?}
      STGY_STORAGE_S3_ENDPOINT: ${STGY_STORAGE_S3_ENDPOINT:?}
      STGY_STORAGE_S3_REGION: ${STGY_STORAGE_S3_REGION:?}
      STGY_STORAGE_S3_ACCESS_KEY_ID: ${STGY_STORAGE_S3_ACCESS_KEY_ID:?}
      STGY_STORAGE_S3_SECRET_ACCESS_KEY: ${STGY_STORAGE_S3_SECRET_ACCESS_KEY:?}
      STGY_STORAGE_S3_FORCE_PATH_STYLE: ${STGY_STORAGE_S3_FORCE_PATH_STYLE:?}
      STGY_STORAGE_S3_BUCKET_PREFIX: ${STGY_STORAGE_S3_BUCKET_PREFIX:?}
      STGY_STORAGE_S3_PUBLIC_URL_PREFIX: ${STGY_STORAGE_S3_PUBLIC_URL_PREFIX:?}
    command: ["node", "dist/mediaWorker.js"]
    restart: unless-stopped

  notificationworker:
    <<: *host_gw
    networks: [stgy_net]
    build:
      context: .
      dockerfile: backend/Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      STGY_DATABASE_HOST: ${STGY_DATABASE_HOST:?}
      STGY_DATABASE_PORT: ${STGY_DATABASE_PORT:-5432}
      STGY_DATABASE_USER: ${STGY_DATABASE_USER:?}
      STGY_DATABASE_PASSWORD: ${STGY_DATABASE_PASSWORD:?}
      STGY_DATABASE_NAME: ${STGY_DATABASE_NAME:?}
      STGY_REDIS_HOST: ${STGY_REDIS_HOST:?}
      STGY_REDIS_PORT: ${STGY_REDIS_PORT:-6379}
      STGY_REDIS_PASSWORD: ${STGY_REDIS_PASSWORD:?}
    command: ["node", "dist/notificationWorker.js"]
    restart: unless-stopped

  backend:
    <<: *host_gw
    networks: [stgy_net]
    build:
      dockerfile: backend/Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_started
      redis:
        condition: service_healthy
    ports:
      - "127.0.0.1:${STGY_BACKEND_PORT:-3001}:${STGY_BACKEND_PORT:-3001}"
    environment:
      STGY_FRONTEND_ORIGIN: ${STGY_FRONTEND_ORIGIN:?}
      STGY_BACKEND_PORT: ${STGY_BACKEND_PORT:-3001}
      STGY_DATABASE_HOST: ${STGY_DATABASE_HOST:?}
      STGY_DATABASE_PORT: ${STGY_DATABASE_PORT:-5432}
      STGY_DATABASE_USER: ${STGY_DATABASE_USER:?}
      STGY_DATABASE_PASSWORD: ${STGY_DATABASE_PASSWORD}
      STGY_DATABASE_NAME: ${STGY_DATABASE_NAME:?}
      STGY_STORAGE_DRIVER: ${STGY_STORAGE_DRIVER:?}
      STGY_STORAGE_S3_ENDPOINT: ${STGY_STORAGE_S3_ENDPOINT:?}
      STGY_STORAGE_S3_REGION: ${STGY_STORAGE_S3_REGION:?}
      STGY_STORAGE_S3_ACCESS_KEY_ID: ${STGY_STORAGE_S3_ACCESS_KEY_ID:?}
      STGY_STORAGE_S3_SECRET_ACCESS_KEY: ${STGY_STORAGE_S3_SECRET_ACCESS_KEY:?}
      STGY_STORAGE_S3_FORCE_PATH_STYLE: ${STGY_STORAGE_S3_FORCE_PATH_STYLE:?}
      STGY_STORAGE_S3_BUCKET_PREFIX: ${STGY_STORAGE_S3_BUCKET_PREFIX:?}
      STGY_STORAGE_S3_PUBLIC_URL_PREFIX: ${STGY_STORAGE_S3_PUBLIC_URL_PREFIX:?}
      STGY_REDIS_HOST: ${STGY_REDIS_HOST:?}
      STGY_REDIS_PORT: ${STGY_REDIS_PORT:-6379}
      STGY_REDIS_PASSWORD: ${STGY_REDIS_PASSWORD:?}
      STGY_MAIL_SENDER_ADDRESS: ${STGY_MAIL_SENDER_ADDRESS:?}
      STGY_ID_ISSUE_WORKER_ID: ${STGY_ID_ISSUE_WORKER_ID:?}
      STGY_TEST_SIGNUP_CODE: ${STGY_TEST_SIGNUP_CODE}
    command: ["node", "dist/index.js"]
    restart: unless-stopped

  frontend:
    <<: *host_gw
    networks: [stgy_net]
    build:
      dockerfile: frontend/Dockerfile
      args:
        NEXT_PUBLIC_BACKEND_API_BASE_URL: ${STGY_BACKEND_API_BASE_URL:?}
        NEXT_PUBLIC_STORAGE_S3_BUCKET_PREFIX: ${STGY_STORAGE_S3_BUCKET_PREFIX:?}
        NEXT_PUBLIC_STORAGE_S3_PUBLIC_URL_PREFIX: ${STGY_STORAGE_S3_PUBLIC_URL_PREFIX:?}
    depends_on:
      backend:
        condition: service_started
    environment:
      PORT: ${STGY_FRONTEND_PORT:-3000}
      NEXT_PUBLIC_BACKEND_API_BASE_URL: ${STGY_BACKEND_API_BASE_URL:?}
      NEXT_PUBLIC_STORAGE_S3_BUCKET_PREFIX: ${STGY_STORAGE_S3_BUCKET_PREFIX:?}
      NEXT_PUBLIC_STORAGE_S3_PUBLIC_URL_PREFIX: ${STGY_STORAGE_S3_PUBLIC_URL_PREFIX:?}
    ports:
      - "127.0.0.1:${STGY_FRONTEND_PORT:-3000}:${STGY_FRONTEND_PORT:-3000}"
    command: ["node", "frontend/server.js"]
    restart: unless-stopped

volumes:
  postgres_data:
  minio_data:
  caddy_data:
  caddy_config:
